name: Deploy lite app to S3
on:
  push:
    branches: ["release"]
    paths: ["pnpm-lock.yaml", "scripts/deploy.sh", "packages/uikit/**", "apps/lite/**"]

permissions:
  id-token: write
  contents: read

jobs:
  deploy-to-s3:
    environment: "production-lite"

    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [22]
    env:
      VITE_WALLET_KIT_PROJECT_ID: ${{ secrets.VITE_WALLET_KIT_PROJECT_ID }}
      VITE_ALCHEMY_API_KEY: ${{ secrets.VITE_ALCHEMY_API_KEY }}
      VITE_ANKR_API_KEY: ${{ secrets.VITE_ANKR_API_KEY }}
      VITE_KATANA_KEY: ${{ secrets. VITE_KATANA_KEY }}
      VITE_APP_TITLE: ${{ vars.VITE_APP_TITLE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create .env
        run: |
          echo "VITE_WALLET_KIT_PROJECT_ID=${{ env.VITE_WALLET_KIT_PROJECT_ID }}" >> apps/lite/.env
          echo "VITE_ALCHEMY_API_KEY=${{ env.VITE_ALCHEMY_API_KEY }}" >> apps/lite/.env
          echo "VITE_ANKR_API_KEY=${{ env.VITE_ANKR_API_KEY }}" >> apps/lite/.env
          echo "VITE_KATANA_KEY=${{ env.VITE_KATANA_KEY }}" >> apps/lite/.env
          echo "VITE_APP_TITLE=${{ env.VITE_APP_TITLE }}" >> apps/lite/.env

      - name: Build lite app
        run: pnpm lite-app:build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@010d0da01d0b5a38af31e9c3470dbfdabdecca3a # v4.0.1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: lightweight-app-deployment-production-role-session
          aws-region: eu-west-3

      - name: Deploy lite app on s3
        run: ./scripts/deploy.sh lite ${{ vars.S3_BUCKET_PRODUCTION }}

      - name: Clean production cache
        run: |
          aws cloudfront create-invalidation --paths "/*" --distribution-id $DISTRIBUTION | \
          jq .Invalidation.Id | xargs aws cloudfront wait invalidation-completed --distribution-id $DISTRIBUTION --id
        env:
          DISTRIBUTION: ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}
